
Easy Pieces #1: Concurrency

 - Concurrency and Parallelism

 - Concurrency: existing, happening, or done at the same time.
    In computer science, concurrency refers to the ability of different
  parts or units of a program, algorithm, or problem to be executed out-of-order
  or in partial order, without affecting the final outcome.(Wikipedia)

L1: multi-core processer bare-metal malloc/free.

git status

git add note.txt

git commit -m "learn use git command" note.txt

git push


cpu x 1:

 - process
   - process's memory space belong to the only one;
   - *p can't access other process's memery;
   - root, can't access system core memory.
 - timer switch between processes.

 - Concurrency : process system API.

write(fd, buf, 1 TiB)
read(fd, buf, 512 MiB)

 - Thread : multi executable stream concurrency and parallelism, and shared memory at the same time.
   - .code .static .data .heap
   - execute order is non-deterministic.

 int x = 0, y = 0; // defaults to 0
 
 void thread_1(){
  [1] x = 1;
  [2] printf("y = %d\n", y);
 }

 void thread_2(){
  [3] y = 1;
  [4] printf("x = %d\n");
}

 - 1 -> 2 -> 3 ->4 (y = 0, x = 1)
 - 1 -> 3 -> 2 ->4 (y = 1, x = 1)
 - 1 -> 3 -> 4 ->2 (x = 1, y = 1)
 ...

extern int x;
int foo() {
  int volatile t = x;
  t += 1;
  x = t;
}

gcc -save-temps -c -o foo.o foo.c

cat foo.s

 (1) code and  extern variable: fun foo(), variable x;    ||  share
 (2) register: rip, rsp, rax;                             ||  only
 (3) variable: t(stack).                                  ||  only

------------------------------------------------------------------
POSIX Threads:
  (1) pthreads:
     pthreads_create
     pthreads_join
     man 7 pthreads
    
gcc a.c -I . -l pthread
ldd a.out
./a.out

gcc hello-mt.c -I. -lpthread -o hello-mt.out
ldd hello-mt.out
./hello-mt.out


cat hello-mt.c

vim stack-probe.c

free -m

vim makefile
make

int x;
void thread_fun() {
  int y; // no see in other thread,otherwise pointer strap 
  x++;   // can see this thread
}

atomicity

int pay(int meney) 
{
  if ( deposit >= money )
  {
    deposit -= money;
    return SUCCESS;
  }
  else
  {
    return FAIL;
  }
}

Dekker's Algorithm

 [1] compiler optimize    : sequence loss
 [2] interrupt/concurrent : atomicity loss
 [3] CPU random order     : visibility loss

void delay() {
  for(volatile int i = 0; i < DELAY_COUNT; i++);
}

mutual exclusion

The Art of Multiprocessor Programming
